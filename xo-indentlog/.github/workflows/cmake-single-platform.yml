# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: checkout source
      uses: actions/checkout@v3

    - name: Install dependencies
      # install catch2.  see [[https://stackoverflow.com/questions/57982945/how-to-apt-get-install-in-a-github-actions-workflow]]
      run: |
        echo "::group::install catch2"
        sudo apt-get install -y catch2
        echo "::endgroup"

    # ----------------------------------------------------------------

    - name: Clone xo-cmake
      uses: actions/checkout@v3
      with:
        repository: Rconybea/xo-cmake
        path: repo/xo-cmake

    - name: build xo-cmake
      run: |
        XONAME=xo-cmake
        XOSRC=repo/${XONAME}
        BUILDDIR=${{github.workspace}}/build_${XONAME}
        PREFIX=${{github.workspace}}/local

        echo "::group::configure ${XONAME}"
        cmake -B ${BUILDDIR} -DCMAKE_INSTALL_PREFIX=${PREFIX} ${XOSRC}
        echo "::endgroup"

        echo "::group::compile ${XONAME}"
        cmake --build ${BUILDDIR} --config ${{env.BUILD_TYPE}}
        echo "::endgroup"

        echo "::group::local install ${XONAME}"
        cmake --install ${BUILDDIR}
        echo "::endgroup"

        echo "::group::local dir tree"
        tree ${PREFIX}
        echo "::endgroup"

    # ----------------------------------------------------------------

    - name: build self (indentlog)
      run: |
        XONAME=xo-indentlog
        BUILDDIR=${{github.workspace}}/build_${XONAME}
        PREFIX=${{github.workspace}}/local

        echo "::group::repo dir tree"
        tree -L 2 repo
        echo "::endgroup"

        echo "::group::configure ${XONAME}"
        cmake -B ${BUILDDIR} -DCMAKE_MODULE_PATH=${PREFIX}/share/cmake -DCMAKE_PREFIX_PATH=${PREFIX} -DCMAKE_INSTALL_PREFIX=${PREFIX} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        echo "::endgroup"

        echo "::group::compile ${XONAME}"
        cmake --build ${BUILDDIR} --config ${{env.BUILD_TYPE}}
        echo "::endgroup"

        echo "::group::run unit tests ${XONAME}"
        cmake --build ${BUILDDIR} -- test
        echo "::endgroup"

        echo "::group::local install ${XONAME}"
        cmake --install ${BUILDDIR}
        echo "::endgroup"

        echo "::group::local dir tree"
        tree -L 3 ${PREFIX}
        echo "::endgroup"

        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        (cd ${BUILDDIR} && ctest -C ${{env.BUILD_TYPE}})
