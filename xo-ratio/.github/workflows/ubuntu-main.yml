name: build xo-ratio + dependencies

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: checkout source
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        # install catch2, doxygen.  see
        #   [[https://stackoverflow.com/questions/57982945/how-to-apt-get-install-in-a-github-actions-workflow]]

        echo "::group::install catch2"
        sudo apt-get install -y catch2
        echo "::endgroup"

        echo "::group::install doxygen"
        sudo apt-get install -y doxygen
        echo "::endgroup"

        echo "::group::install sphinx"
        sudo apt-get install -y python3-sphinx
        echo "::endgroup"

        echo "::group::install sphinx readthedocs theme"
        sudo apt-get install -y python3-sphinx-rtd-theme
        echo "::endgroup"

        #echo "::group::install pybind11"
        #sudo apt-get install -y pybind11-dev
        #echo "::endgroup"

    # ----------------------------------------------------------------

    - name: clone xo-cmake
      uses: actions/checkout@v3
      with:
        repository: Rconybea/xo-cmake
        path: repo/xo-cmake

    - name: build xo-cmake
      run: |
        XONAME=xo-cmake
        XOSRC=repo/${XONAME}
        BUILDDIR=${{github.workspace}}/build_${XONAME}
        PREFIX=${{github.workspace}}/local

        echo "::group::configure ${XONAME}"
        cmake -B ${BUILDDIR} -DCMAKE_INSTALL_PREFIX=${PREFIX} ${XOSRC}
        echo "::endgroup"

        echo "::group::compile ${XONAME}"
        cmake --build ${BUILDDIR} --config ${{env.BUILD_TYPE}}
        echo "::endgroup"

        echo "::group::local install ${XONAME}"
        cmake --install ${BUILDDIR}
        echo "::endgroup"

        echo "::group::local dir tree"
        tree ${PREFIX}
        echo "::endgroup"

    # ----------------------------------------------------------------

    - name: clone xo-indentlog
      uses: actions/checkout@v3
      with:
        repository: Rconybea/indentlog
        path: repo/xo-indentlog

    - name: build xo-indentlog
      run: |
        XONAME=xo-indentlog
        XOSRC=repo/${XONAME}
        BUILDDIR=${{github.workspace}}/build_${XONAME}
        PREFIX=${{github.workspace}}/local

        echo "::group::repo dir tree"
        tree -L 2 repo
        echo "::endgroup"

        echo "::group::configure ${XONAME}"
        cmake -B ${BUILDDIR} -DCMAKE_INSTALL_PREFIX=${PREFIX} ${XOSRC}
        echo "::endgroup"

        echo "::group::compile ${XONAME}"
        cmake --build ${BUILDDIR} --config ${{env.BUILD_TYPE}} -j
        echo "::endgroup"

        echo "::group::local install ${XONAME}"
        cmake --install ${BUILDDIR}
        echo "::endgroup"

        echo "::group::local dir tree"
        tree -L 3 ${PREFIX}
        echo "::endgroup"

    # ----------------------------------------------------------------

    - name: clone xo-randomgen
      uses: actions/checkout@v3
      with:
        repository: Rconybea/randomgen
        path: repo/xo-randomgen

    - name: build xo-randomgen
      run: |
        XONAME=xo-randomgen
        XOSRC=repo/${XONAME}
        BUILDDIR=${{github.workspace}}/build_${XONAME}
        PREFIX=${{github.workspace}}/local

        echo "::group::repo dir tree"
        tree -L 2 repo
        echo "::endgroup"

        echo "::group::configure ${XONAME}"
        cmake -B ${BUILDDIR} -DCMAKE_INSTALL_PREFIX=${PREFIX} ${XOSRC}
        echo "::endgroup"

        echo "::group::compile ${XONAME}"
        cmake --build ${BUILDDIR} --config ${{env.BUILD_TYPE}} -j
        echo "::endgroup"

        echo "::group::local install ${XONAME}"
        cmake --install ${BUILDDIR}
        echo "::endgroup"

        echo "::group::local dir tree"
        tree -L 3 ${PREFIX}
        echo "::endgroup"

    # ----------------------------------------------------------------

    - name: clone xo-flatstring
      uses: actions/checkout@v3
      with:
        repository: Rconybea/xo-flatstring
        path: repo/xo-flatstring

    - name: build xo-flatstring
      run: |
        XONAME=xo-flatstring
        XOSRC=repo/${XONAME}
        BUILDDIR=${{github.workspace}}/build_${XONAME}
        PREFIX=${{github.workspace}}/local

        echo "::group::repo dir tree"
        tree -L 2 repo
        echo "::endgroup"

        echo "::group::configure ${XONAME}"
        cmake -B ${BUILDDIR} -DCMAKE_INSTALL_PREFIX=${PREFIX} ${XOSRC}
        echo "::endgroup"

        echo "::group::compile ${XONAME}"
        cmake --build ${BUILDDIR} --config ${{env.BUILD_TYPE}} -j
        echo "::endgroup"

        echo "::group::local install ${XONAME}"
        cmake --install ${BUILDDIR}
        echo "::endgroup"

        echo "::group::local dir tree"
        tree -L 3 ${PREFIX}
        echo "::endgroup"

    # ----------------------------------------------------------------

    - name: build self (xo-ratio)
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        XONAME=xo-ratio
        BUILDDIR=${{github.workspace}}/build_${XONAME}
        PREFIX=${{github.workspace}}/local

        echo "::group::repo dir tree"
        tree -L 2 repo
        echo "::endgroup"

        echo "::group::configure ${XONAME}"
        cmake -B ${BUILDDIR} -DCMAKE_MODULE_PATH=${PREFIX}/share/cmake -DCMAKE_PREFIX_PATH=${PREFIX} -DCMAKE_INSTALL_PREFIX=${PREFIX} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        echo "::endgroup"

        echo "::group::compile ${XONAME}"
        cmake --build ${BUILDDIR} --config ${{env.BUILD_TYPE}}
        echo "::endgroup"

        echo "::group::run unit tests ${XONAME}"
        cmake --build ${BUILDDIR} -- test
        echo "::endgroup"

        echo "::group::local install ${XONAME}"
        cmake --install ${BUILDDIR}
        echo "::endgroup"

        echo "::group::local dir tree"
        tree -L 3 ${PREFIX}
        echo "::endgroup"

        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        (cd ${BUILDDIR} && ctest -C ${{env.BUILD_TYPE}})
